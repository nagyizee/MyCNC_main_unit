#ifndef MOTION_CORE_H
#define MOTION_CORE_H

#ifdef __cplusplus
    extern "C" {
#endif

    #include "cnc_defs.h"


    #define SEQ_TYPE_GOTO       1       // linear motion
    #define SEQ_TYPE_SPINDLE    2       // spindle speed
    #define SEQ_TYPE_HOLD       3       // hold time


    struct SMS_Goto
    {
        TStepCoord coord;           // coordinate to go to
        TFeedSpeed feed;            // feed speed in steps/sec
        // TODO: speed difference factor between segments
    };

    struct SMS_Spindle
    {
        TSpindleSpeed speed;        // spindle speed
    };

    struct SMS_hold
    {
        uint32  ticks;              // 10ms ticks to wait
    };

    // motion sequence element
    struct SMotionSequence
    {
        uint8   cmdID;      // command ID got from the host. It is 0 - if it is generated by sequence generator
        uint8   seqID;      // incremental sequence ID generated in sequence generator
        uint8   seqType;    // see SEQ_TYPE_xxx defines
        uint8   res;
        union UMS_params
        {
            struct SMS_Goto     go_to;      // for SEQ_TYPE_GOTO
            struct SMS_Spindle  spindle;    // for SEQ_TYPE_SPINDLE
            struct SMS_hold     hold;       // for SEQ_TYPE_HOLD
        } params;

    };


    // Init motion core
    void motion_init( void );

    // Set axis power. power can have the following values:
    //  0 - power off
    //  1-4 power level.    4 is the maximum
    // routine is async - wait for power setup for best result
    void motion_pwr_ctrl( uint32 axis, uint32 power );

    // gets the busy state - if returs true - power is set up
    bool motion_pwr_is_set( uint32 axis );

    // sets up the internal soft and hard coordinate counters
    // - do not use this when executing movement
    void motion_set_crt_coord( struct SStepCoordinates *coord );

    // get the current soft coordinates
    void motion_get_crt_coord( struct SStepCoordinates *coord );

    // Set up endpoint values. NULL will clear them
    void motion_set_max_travel( struct SStepCoordinates *coord );


    // execute a single step on an axis
    // if maximum points are not initted - it will go without boundaries
    // routine is synchronous - will wait till step fifo is emptied -> can not generate high frequency stepping
    void motion_step( uint32 axis, uint32 dir );



    // sets the spindle speed
    // 0 - spindle stopped
    // 0-TBD - spindle speed
    // Call motion_spindle_is_ok() for busy state
    void motion_spindle( TSpindleSpeed speed );

    // Scale the spindle speed with +/- factor. Value is 0 - 100.
    // 0 - no scale, +100 - speed up with x5, -100 - speed down with x5
    // it applies the factor in progressive way, no need to wait for it
    void motion_spindle_scale( int factor );

    // returns true when spindle speed is OK
    bool motion_spindle_is_ok();



    // insert a motion sequence in the sequence fifo
    int motion_insert_sequence( struct SMotionSequence *seq );





#ifdef __cplusplus
    }
#endif


#endif // MOTION_CORE_H
