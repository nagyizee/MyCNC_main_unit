#ifndef MOTION_CORE_INTERNALS_H
#define MOTION_CORE_INTERNALS_H

#ifdef __cplusplus
    extern "C" {
#endif

    #include "cnc_defs.h"
    #include "motion_core.h"

    #define MAX_SEQ_FIFO        20          // 960 bytes for sequence fifo


    struct SMFEL_Goto
    {
        struct SStepCoordinates coord;      // coordinate to be reached
        uint32 distances[CNC_MAX_COORDS];   // distances
        uint64 Ttot;                        // total sysclock time for liniar motion in fp32
        uint32 dirmask;                     // direction mask
    };                                      // - total: 44bytes


    struct SMotionFifoElement
    {
        uint8   cmdID;      // command ID got from the host. It is 0 - if it is generated by sequence generator
        uint8   seqID;      // incremental sequence ID generated in sequence generator
        uint8   seqType;    // see SEQ_TYPE_xxx defines
        uint8   res;
        union UMFEL_params
        {
            struct SMFEL_Goto   go_to;      // for SEQ_TYPE_GOTO
            TSpindleSpeed       spindle;    // for SEQ_TYPE_SPINDLE
            uint32              hold;       // for SEQ_TYPE_HOLD
            // note#0001 : If other parameters are added or current prms are changed in this union, change the code in motion_core.c, search for "note#0001" in the code
        } params;
    };                      // - total: 48 bytes


    struct SMotionSequenceFifo
    {
        struct SMotionFifoElement  seq[MAX_SEQ_FIFO];
        struct SStepCoordinates    pcoord;              // previous coordinate - used for distance calculation when introducing sequences in fifo
        uint8   pcoord_updated;                         // 0 if this is the first entry since stop or flush, 1 - if pcood is allready updated
        uint8   c;
        uint8   w;
        uint8   r;
    };


    struct SMotionGotoOp
    {
        uint32  dirmask;                        // bitmask with directions
        uint32  Tctr;                           // systime loop counter in Int
        uint64  Ttot;                           // total runtime in fp32
        uint64  StepCkInc[CNC_MAX_COORDS];      // sysclock increments for each steps
        uint64  StepCkCntr[CNC_MAX_COORDS];     // sysclock for the next step


    };


    union UMotionOperation
    {
        struct SMotionGotoOp    go_to;


    };

    struct SMotionStatus
    {
        bool is_running;                        // sequencer is running an active sequence ( busy state )
        bool is_started;                        // sequencer is started

        struct SMotionFifoElement  crt_seq;     // current sequence in run
        union UMotionOperation  op;
    };


    struct SMotionCoreInternals
    {

        struct SStepCoordinates crt_coord;       // current soft coordinates. They are considered before the step fifo
        struct SStepCoordinates max_travel;      // maximum step number on each axis

        struct SMotionSequenceFifo seq_fifo;     // motion sequence fifo

        struct SMotionStatus    status;          // insternal status of the motion core
    };






#ifdef __cplusplus
    }
#endif


#endif // MOTION_CORE_INTERNALS_H
