#ifndef MOTION_CORE_INTERNALS_H
#define MOTION_CORE_INTERNALS_H

#ifdef __cplusplus
    extern "C" {
#endif

    #include "cnc_defs.h"
    #include "motion_core.h"

    #define MAX_SEQ_FIFO      20        // 1840 bytes fifo


    struct SMotionCoreActionCommon              // struct. size = 84
    {
        struct SStepCoordinates dest_poz;       // destination coordinate
        uint32 Stp_crt[CNC_MAX_COORDS];         // current speed - fractional to 32:32fp format (or start speed)
        uint32 Stp_ct[CNC_MAX_COORDS];          // constant speed - fractional to 32:32fp format
        uint32 Acc[CNC_MAX_COORDS];             // acceleration increments on each axis ( steps/stepck^2 ) given in FP42 held in 32bit container
        uint64 accdec[2];                       // [0] - accelerate to this distance point, [1] - decelerate from this point
        uint32 accsens;                         // bit 0 -> beginning 1-positive 0-negative, bit 1 -> ending 1-positive 0-negative 
    };



    struct SMFEL_Goto                           // struct size = 84 + 4 = 88
    {
        struct SMotionCoreActionCommon     p;   // parameters

        uint8 channel_active;                   // Bit 1 means that we have movement on the corresponding coordinate, 0 - if no movement on coordinate
        uint8 dir_mask;                         // direction mask ( 1- plus, 0- minus )
        uint8 ax_max_dist;                      // axis index with maximum distance - acceleration / constant / deceleration points are given on this
        uint8 reserved;
    };                                          // - total: 44bytes


    struct SMotionFifoElement                   // struct size = 4 + 88 = 92
    {
        uint8   cmdID;      // command ID got from the host. It is 0 - if it is generated by sequence generator
        uint8   seqID;      // incremental sequence ID generated in sequence generator
        uint8   seqType;    // see SEQ_TYPE_xxx defines
        uint8   res;
        union UMFEL_params
        {
            struct SMFEL_Goto   go_to;      // for SEQ_TYPE_GOTO
            TSpindleSpeed       spindle;    // for SEQ_TYPE_SPINDLE
            uint32              hold;       // for SEQ_TYPE_HOLD
            // note#0001 : If other parameters are added or current prms are changed in this union, change the code in motion_core.c, search for "note#0001" in the code
        } params;
    };                      // - total: 48 bytes


    struct SMotionSequenceFifo
    {
        struct SMotionFifoElement  seq[MAX_SEQ_FIFO];
        struct SStepCoordinates    pcoord;              // previous coordinate - used for distance calculation when introducing sequences in fifo
        uint8   pcoord_updated;                         // 0 if this is the first entry since stop or flush, 1 - if pcood is allready updated
        uint8   c;
        uint8   w;
        uint8   r;
    };

    #define GOTO_PHASE_CT       0
    #define GOTO_PHASE_ACCEL    1
    #define GOTO_PHASE_DECEL    2


    struct SMotionGotoOp
    {
        uint32  dirmask;                        // bitmask with directions
        uint32  Tctr;                           // systime loop counter in Int
        uint64  Ttot;                           // total runtime in fp32
        uint64  StepCkInc[CNC_MAX_COORDS];      // sysclock increments for each steps
        uint64  StepCkCntr[CNC_MAX_COORDS];     // sysclock for the next step
        int32 prev_speeds[CNC_MAX_COORDS];      // axis speeds from the previous sequence
        bool    need_acc;
        bool    need_dec;
        uint32  op_phase;                       // operation phase on goto sequence: accelerate, decelerate, constant               

    };


    union UMotionOperation
    {
        struct SMotionGotoOp    go_to;


    };

    struct SMotionStatus
    {
        bool is_running;                        // sequencer is running an active sequence ( busy state )
        bool is_started;                        // sequencer is started

        struct SMotionFifoElement  crt_seq;     // sequence currently in run
        union UMotionOperation     op;
    };


    struct SMotionCoreInternals
    {
        struct SStepCoordinates     max_travel; // maximum step number on each axis
        struct SMotionSequenceFifo  seq_fifo;   // motion sequence fifo
        struct SMotionStatus        status;     // insternal status of the motion core
    };


    #define MCISR_STATUS_IDLE       0       // no movement is done
    #define MCISR_STATUS_RUP        1       // speed ramp up
    #define MCISR_STATUS_CT         2       // constant speed
    #define MCISR_STATUS_RDOWN      3       // speed ramp down


    struct SMotionCoreISRaction
    {
        struct SMotionCoreActionCommon  p;      // parameters

        uint32 channel_active;                  // Bit 1 means that we have movement on the corresponding coordinate, 0 - if no movement on coordinate
        int ax_max_dist;                        // axis index with maximum distance - acceleration / constant / deceleration points are given on this
        uint32 dir_mask;                        // direction mask ( 1- plus, 0- minus )
    };


    struct SMotionCoreISRop
    {
        uint64  D[CNC_MAX_COORDS];              // distance in 32:32fp - the upper part is the step integer part, the lower part is the fractional part
        uint32  Dprev[CNC_MAX_COORDS];
    };


    struct SMotionCoreISR
    {
        uint32  state;                          // see MCISR_STATUS_XXX defines

        struct SMotionCoreISRaction crt_action; // action passed from user level
        struct SMotionCoreISRaction next_action;// next movement action to be executed - set up by the user level core code
        struct SMotionCoreISRop     op;         // operation

        uint32  ckmask;                         // bitmask with channels where clock signal is set
        uint32  ckoff[CNC_MAX_COORDS];          // clock off timeout

        struct SStepCoordinates crt_poz;        // current position
                                                
    };



#ifdef __cplusplus
    }
#endif


#endif // MOTION_CORE_INTERNALS_H
